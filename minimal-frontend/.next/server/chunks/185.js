"use strict";exports.id=185,exports.ids=[185],exports.modules={9185:(e,t,r)=>{r.d(t,{AT:()=>getMoleculeDepiction,GK:()=>getMixtures,cZ:()=>getMolecule,getMolecules:()=>getMolecules,rY:()=>getMixture});let o={molecules:[{id:1,name:"Glycerol",formula:"C3H8O3",pubchem_cid:"753",smiles:"C(C(CO)O)O",molecular_weight:92.09,is_cryoprotectant:!0,description:"A common cryoprotectant used in various applications."},{id:2,name:"Dimethyl Sulfoxide (DMSO)",formula:"C2H6OS",pubchem_cid:"679",smiles:"CS(=O)C",molecular_weight:78.13,is_cryoprotectant:!0,description:"A widely used penetrating cryoprotectant."},{id:3,name:"Ethylene Glycol",formula:"C2H6O2",pubchem_cid:"174",smiles:"OCCO",molecular_weight:62.07,is_cryoprotectant:!0,description:"Used in cryopreservation of embryos and tissues."},{id:4,name:"Propylene Glycol",formula:"C3H8O2",pubchem_cid:"1030",smiles:"CC(O)CO",molecular_weight:76.09,is_cryoprotectant:!0,description:"Used as a cryoprotectant for various biological materials."}],mixtures:[{id:1,name:"VS55",description:"A cryoprotectant mixture used for organ preservation.",components:[{molecule:{id:1,name:"Glycerol",formula:"C3H8O3"},concentration:15,concentration_unit:"%",role:"Primary cryoprotectant"},{molecule:{id:2,name:"Dimethyl Sulfoxide (DMSO)",formula:"C2H6OS"},concentration:20,concentration_unit:"%",role:"Penetrating cryoprotectant"},{molecule:{id:3,name:"Ethylene Glycol",formula:"C2H6O2"},concentration:20,concentration_unit:"%",role:"Penetrating cryoprotectant"}]},{id:2,name:"Standard Cell Freezing Medium",description:"Common mixture for cell line preservation.",components:[{molecule:{id:2,name:"Dimethyl Sulfoxide (DMSO)",formula:"C2H6OS"},concentration:10,concentration_unit:"%",role:"Primary cryoprotectant"}]}],molecular_depictions:{"C(C(CO)O)O":`<svg version="1.1" id="mol-glycerol" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="300px" height="200px" viewBox="0 0 300 200" enable-background="new 0 0 300 200">
      <rect fill="#FFFFFF" width="300" height="200"/>
      <g transform="translate(10,10) scale(2.8)">
        <path fill="none" stroke="#000000" stroke-width="1.5" d="M 50,34.6 L 60,40 L 70,34.6"/>
        <path fill="none" stroke="#000000" stroke-width="1.5" d="M 60,40 L 60,50"/>
        <path fill="none" stroke="#000000" stroke-width="1.5" d="M 60,50 L 70,55.4"/>
        <path fill="none" stroke="#000000" stroke-width="1.5" d="M 60,50 L 50,55.4"/>
        <text x="49" y="32" font-family="sans-serif" font-size="10" fill="#FF0000">OH</text>
        <text x="69" y="32" font-family="sans-serif" font-size="10" fill="#FF0000">OH</text>
        <text x="69" y="62" font-family="sans-serif" font-size="10" fill="#FF0000">OH</text>
      </g>
    </svg>`,"CS(=O)C":`<svg version="1.1" id="mol-dmso" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="300px" height="200px" viewBox="0 0 300 200" enable-background="new 0 0 300 200">
      <rect fill="#FFFFFF" width="300" height="200"/>
      <g transform="translate(10,10) scale(2.8)">
        <path fill="none" stroke="#000000" stroke-width="1.5" d="M 50,50 L 60,50"/>
        <path fill="none" stroke="#000000" stroke-width="1.5" d="M 60,50 L 70,50"/>
        <path fill="none" stroke="#000000" stroke-width="1.5" d="M 60,50 L 60,40"/>
        <text x="56" y="54" font-family="sans-serif" font-size="10" fill="#AA5500">S</text>
        <text x="59" y="36" font-family="sans-serif" font-size="10" fill="#FF0000">O</text>
      </g>
    </svg>`},molecular_properties:{"C(C(CO)O)O":{molecular_weight:92.09,logp:-1.76,num_atoms:14,num_rings:0,formula:"C3H8O3"},"CS(=O)C":{molecular_weight:78.13,logp:-.62,num_atoms:10,num_rings:0,formula:"C2H6OS"},OCCO:{molecular_weight:62.07,logp:-1.2,num_atoms:10,num_rings:0,formula:"C2H6O2"},"CC(O)CO":{molecular_weight:76.09,logp:-.92,num_atoms:13,num_rings:0,formula:"C3H8O2"}}},i={HEROKU_API:{failureCount:0,lastFailureTime:null,state:"CLOSED",lastSuccessTime:Date.now()},RDKIT_API:{failureCount:0,lastFailureTime:null,state:"CLOSED",lastSuccessTime:Date.now()}};function isCircuitOpen(e){let t=i[e];if(!t)return!1;if("OPEN"===t.state){let r=Date.now();return!(r-t.lastFailureTime>3e4)||(t.state="HALF_OPEN",console.info(`Circuit breaker for ${e} moving to HALF_OPEN state`),!1)}return!1}function recordSuccess(e){let t=i[e];t&&(t.lastSuccessTime=Date.now(),"HALF_OPEN"===t.state?(t.failureCount=0,t.state="CLOSED",console.info(`Circuit breaker for ${e} reset to CLOSED state`)):"CLOSED"===t.state&&(t.failureCount=0))}function recordFailure(e){let t=i[e];t&&(t.failureCount++,t.lastFailureTime=Date.now(),"CLOSED"===t.state&&t.failureCount>=5?(t.state="OPEN",console.warn(`Circuit breaker for ${e} tripped to OPEN state after 5 failures`)):"HALF_OPEN"===t.state&&(t.state="OPEN",console.warn(`Circuit breaker for ${e} returned to OPEN state after failed test request`)))}async function fetchWithErrorHandling(e,t={},r=null,o=0){let i="HEROKU_API",n=`https://cryoprotect-8030e4025428.herokuapp.com/api${e}`,l=Math.random().toString(36).substring(2,10);if(isCircuitOpen(i))return console.warn(`[${l}] Circuit open for ${i}, falling back to mock data`),getMockData(e,r);let a="undefined"!=typeof AbortController?new AbortController:null,s=t.timeout||1e4,c=a?setTimeout(()=>a.abort(),s):null;try{console.info(`[${l}] Fetching from ${n} (attempt ${o+1}/4)`);let e=await fetch(n,{...t,headers:{"Content-Type":"application/json",Accept:"application/json","X-Request-ID":l,...t.headers},mode:"cors",credentials:"omit",signal:t.signal||a?.signal});if(c&&clearTimeout(c),!e.ok)throw Error(`API error: ${e.status} ${e.statusText}`);let r=await e.json();return recordSuccess(i),r}catch(u){c&&clearTimeout(c);let n="AbortError"===u.name,a=n?`Request timed out after ${s}ms`:u.message;if(console.error(`[${l}] API request failed (attempt ${o+1}/4): ${a}`),recordFailure(i),o<3){let i=1e3*Math.pow(2,o);return console.info(`[${l}] Retrying in ${i}ms...`),new Promise(n=>{setTimeout(()=>{n(fetchWithErrorHandling(e,t,r,o+1))},i)})}return console.warn(`[${l}] All retries failed, falling back to mock data`),getMockData(e,r)}}function getMockData(e,t){if(t&&o[t]){if(console.info(`Using mock data for ${e} with key ${t}`),e.includes("/")){let r=e.split("/"),i=r[r.length-1],n=o[t];if(n&&Array.isArray(n)){let e=n.find(e=>String(e.id)===String(i));if(e)return e}}return o[t]}if(e.includes("molecules"))return Array.isArray(o.molecules)?o.molecules[0]:null;if(e.includes("mixtures"))return Array.isArray(o.mixtures)?o.mixtures[0]:null;throw Error(`No mock data available for ${e}`)}async function fetchRDKitAPI(e,t,r={},o=0){let i="RDKIT_API",n=`https://cryoprotect-rdkit.fly.dev${e}`,l=Math.random().toString(36).substring(2,10);if(isCircuitOpen(i))throw console.warn(`[${l}] Circuit open for ${i}`),Error("RDKit service unavailable (circuit open)");let a="undefined"!=typeof AbortController?new AbortController:null,s=r.timeout||1e4,c=a?setTimeout(()=>a.abort(),s):null;try{console.info(`[${l}] Fetching from ${n} (attempt ${o+1}/4)`);let e=await fetch(n,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json","X-Request-ID":l,...r.headers},body:JSON.stringify(t),mode:"cors",credentials:"omit",signal:a?.signal});if(c&&clearTimeout(c),!e.ok)throw Error(`RDKit API error: ${e.status} ${e.statusText}`);let s=await e.json();return recordSuccess(i),s}catch(u){c&&clearTimeout(c);let n="AbortError"===u.name,a=n?`Request timed out after ${s}ms`:u.message;if(console.error(`[${l}] RDKit API request failed (attempt ${o+1}/4): ${a}`),recordFailure(i),o<3){let i=1e3*Math.pow(2,o);return console.info(`[${l}] Retrying RDKit API in ${i}ms...`),new Promise(n=>{setTimeout(()=>{n(fetchRDKitAPI(e,t,r,o+1))},i)})}throw u}}async function getMolecules(){return fetchWithErrorHandling("/molecules",{},"molecules")}async function getMolecule(e){return fetchWithErrorHandling(`/molecules/${e}`,{},"molecules")}async function getMixtures(){return fetchWithErrorHandling("/mixtures",{},"mixtures")}async function getMixture(e){return fetchWithErrorHandling(`/mixtures/${e}`,{},"mixtures")}async function getMoleculeDepiction(e,t={}){if(!e)return"";let r={smiles:e,width:t.width||300,height:t.height||200,includeMoleculeDetails:t.includeMoleculeDetails||!1};try{let e=await fetchRDKitAPI("/depict",r);return e.svg||""}catch(t){if(console.error("RDKit depiction generation failed:",t),o.molecular_depictions[e])return console.info(`Using cached depiction for ${e}`),o.molecular_depictions[e];return""}}}};