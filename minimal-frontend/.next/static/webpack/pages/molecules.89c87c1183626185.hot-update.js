"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/molecules",{

/***/ "./utils/api.js":
/*!**********************!*\
  !*** ./utils/api.js ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addMolecule: function() { return /* binding */ addMolecule; },\n/* harmony export */   checkConvexConnection: function() { return /* binding */ checkConvexConnection; },\n/* harmony export */   deleteMolecule: function() { return /* binding */ deleteMolecule; },\n/* harmony export */   getMixture: function() { return /* binding */ getMixture; },\n/* harmony export */   getMixtures: function() { return /* binding */ getMixtures; },\n/* harmony export */   getMolecule: function() { return /* binding */ getMolecule; },\n/* harmony export */   getMoleculeDepiction: function() { return /* binding */ getMoleculeDepiction; },\n/* harmony export */   getMolecules: function() { return /* binding */ getMolecules; },\n/* harmony export */   getRDKitProperties: function() { return /* binding */ getRDKitProperties; }\n/* harmony export */ });\n/**\n * API utility functions for fetching data from the CryoProtect backend\n * Supports both REST API and Convex\n * Enhanced with circuit breaker pattern, retry mechanisms, and fallbacks\n */ // Convex client import disabled for minimal deployment\n// import { convex } from '../src/convex/client';\n// Base API URLs\nconst API_ENDPOINTS = {\n    HEROKU_API: \"https://cryoprotect-8030e4025428.herokuapp.com/api\",\n    RDKIT_API: \"https://cryoprotect-rdkit.fly.dev\",\n    CONVEX: \"https://primary-meerkat-478.convex.cloud\"\n};\n// Disable Convex for minimal deployment\nconst USE_CONVEX = false;\n// Fallback mock data in case the API is not available\nconst MOCK_DATA = {\n    molecules: [\n        {\n            id: 1,\n            name: \"Glycerol\",\n            formula: \"C3H8O3\",\n            pubchem_cid: \"753\",\n            smiles: \"C(C(CO)O)O\",\n            molecular_weight: 92.09,\n            is_cryoprotectant: true,\n            description: \"A common cryoprotectant used in various applications.\"\n        },\n        {\n            id: 2,\n            name: \"Dimethyl Sulfoxide (DMSO)\",\n            formula: \"C2H6OS\",\n            pubchem_cid: \"679\",\n            smiles: \"CS(=O)C\",\n            molecular_weight: 78.13,\n            is_cryoprotectant: true,\n            description: \"A widely used penetrating cryoprotectant.\"\n        },\n        {\n            id: 3,\n            name: \"Ethylene Glycol\",\n            formula: \"C2H6O2\",\n            pubchem_cid: \"174\",\n            smiles: \"OCCO\",\n            molecular_weight: 62.07,\n            is_cryoprotectant: true,\n            description: \"Used in cryopreservation of embryos and tissues.\"\n        },\n        {\n            id: 4,\n            name: \"Propylene Glycol\",\n            formula: \"C3H8O2\",\n            pubchem_cid: \"1030\",\n            smiles: \"CC(O)CO\",\n            molecular_weight: 76.09,\n            is_cryoprotectant: true,\n            description: \"Used as a cryoprotectant for various biological materials.\"\n        }\n    ],\n    mixtures: [\n        {\n            id: 1,\n            name: \"VS55\",\n            description: \"A cryoprotectant mixture used for organ preservation.\",\n            components: [\n                {\n                    molecule: {\n                        id: 1,\n                        name: \"Glycerol\",\n                        formula: \"C3H8O3\"\n                    },\n                    concentration: 15,\n                    concentration_unit: \"%\",\n                    role: \"Primary cryoprotectant\"\n                },\n                {\n                    molecule: {\n                        id: 2,\n                        name: \"Dimethyl Sulfoxide (DMSO)\",\n                        formula: \"C2H6OS\"\n                    },\n                    concentration: 20,\n                    concentration_unit: \"%\",\n                    role: \"Penetrating cryoprotectant\"\n                },\n                {\n                    molecule: {\n                        id: 3,\n                        name: \"Ethylene Glycol\",\n                        formula: \"C2H6O2\"\n                    },\n                    concentration: 20,\n                    concentration_unit: \"%\",\n                    role: \"Penetrating cryoprotectant\"\n                }\n            ]\n        },\n        {\n            id: 2,\n            name: \"Standard Cell Freezing Medium\",\n            description: \"Common mixture for cell line preservation.\",\n            components: [\n                {\n                    molecule: {\n                        id: 2,\n                        name: \"Dimethyl Sulfoxide (DMSO)\",\n                        formula: \"C2H6OS\"\n                    },\n                    concentration: 10,\n                    concentration_unit: \"%\",\n                    role: \"Primary cryoprotectant\"\n                }\n            ]\n        }\n    ],\n    // Mock SVG data for molecule depictions (minimal example)\n    molecular_depictions: {\n        \"C(C(CO)O)O\": '<svg version=\"1.1\" id=\"mol-glycerol\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"300px\" height=\"200px\" viewBox=\"0 0 300 200\" enable-background=\"new 0 0 300 200\">\\n      <rect fill=\"#FFFFFF\" width=\"300\" height=\"200\"/>\\n      <g transform=\"translate(10,10) scale(2.8)\">\\n        <path fill=\"none\" stroke=\"#000000\" stroke-width=\"1.5\" d=\"M 50,34.6 L 60,40 L 70,34.6\"/>\\n        <path fill=\"none\" stroke=\"#000000\" stroke-width=\"1.5\" d=\"M 60,40 L 60,50\"/>\\n        <path fill=\"none\" stroke=\"#000000\" stroke-width=\"1.5\" d=\"M 60,50 L 70,55.4\"/>\\n        <path fill=\"none\" stroke=\"#000000\" stroke-width=\"1.5\" d=\"M 60,50 L 50,55.4\"/>\\n        <text x=\"49\" y=\"32\" font-family=\"sans-serif\" font-size=\"10\" fill=\"#FF0000\">OH</text>\\n        <text x=\"69\" y=\"32\" font-family=\"sans-serif\" font-size=\"10\" fill=\"#FF0000\">OH</text>\\n        <text x=\"69\" y=\"62\" font-family=\"sans-serif\" font-size=\"10\" fill=\"#FF0000\">OH</text>\\n      </g>\\n    </svg>',\n        \"CS(=O)C\": '<svg version=\"1.1\" id=\"mol-dmso\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"300px\" height=\"200px\" viewBox=\"0 0 300 200\" enable-background=\"new 0 0 300 200\">\\n      <rect fill=\"#FFFFFF\" width=\"300\" height=\"200\"/>\\n      <g transform=\"translate(10,10) scale(2.8)\">\\n        <path fill=\"none\" stroke=\"#000000\" stroke-width=\"1.5\" d=\"M 50,50 L 60,50\"/>\\n        <path fill=\"none\" stroke=\"#000000\" stroke-width=\"1.5\" d=\"M 60,50 L 70,50\"/>\\n        <path fill=\"none\" stroke=\"#000000\" stroke-width=\"1.5\" d=\"M 60,50 L 60,40\"/>\\n        <text x=\"56\" y=\"54\" font-family=\"sans-serif\" font-size=\"10\" fill=\"#AA5500\">S</text>\\n        <text x=\"59\" y=\"36\" font-family=\"sans-serif\" font-size=\"10\" fill=\"#FF0000\">O</text>\\n      </g>\\n    </svg>'\n    },\n    // Precomputed molecular properties for fallback\n    molecular_properties: {\n        \"C(C(CO)O)O\": {\n            molecular_weight: 92.09,\n            logp: -1.76,\n            num_atoms: 14,\n            num_rings: 0,\n            formula: \"C3H8O3\"\n        },\n        \"CS(=O)C\": {\n            molecular_weight: 78.13,\n            logp: -0.62,\n            num_atoms: 10,\n            num_rings: 0,\n            formula: \"C2H6OS\"\n        },\n        \"OCCO\": {\n            molecular_weight: 62.07,\n            logp: -1.2,\n            num_atoms: 10,\n            num_rings: 0,\n            formula: \"C2H6O2\"\n        },\n        \"CC(O)CO\": {\n            molecular_weight: 76.09,\n            logp: -0.92,\n            num_atoms: 13,\n            num_rings: 0,\n            formula: \"C3H8O2\"\n        }\n    }\n};\n// Utility to check if we're running in the browser\nconst isBrowser = \"object\" !== \"undefined\";\n// Circuit breaker state - persistent across requests in the same session\nconst circuitBreaker = {\n    HEROKU_API: {\n        failureCount: 0,\n        lastFailureTime: null,\n        state: \"CLOSED\",\n        lastSuccessTime: Date.now()\n    },\n    RDKIT_API: {\n        failureCount: 0,\n        lastFailureTime: null,\n        state: \"CLOSED\",\n        lastSuccessTime: Date.now()\n    }\n};\n// Circuit breaker settings\nconst CIRCUIT_BREAKER_THRESHOLD = 5; // Number of failures before opening circuit\nconst CIRCUIT_BREAKER_TIMEOUT = 30000; // Time to wait before trying again (half-open)\nconst MAX_RETRIES = 3; // Maximum number of retries for a request\nconst RETRY_BACKOFF_MS = 1000; // Base backoff time in milliseconds\nconst REQUEST_TIMEOUT_MS = 10000; // Default request timeout (10 seconds)\n/**\n * Check if circuit breaker is open for the given service\n * @param {string} service - Service to check (HEROKU_API, RDKIT_API)\n * @returns {boolean} - True if circuit is open\n */ function isCircuitOpen(service) {\n    const breaker = circuitBreaker[service];\n    if (!breaker) return false;\n    if (breaker.state === \"OPEN\") {\n        // Check if enough time has passed to try again\n        const now = Date.now();\n        if (now - breaker.lastFailureTime > CIRCUIT_BREAKER_TIMEOUT) {\n            // Move to half-open state\n            breaker.state = \"HALF_OPEN\";\n            console.info(\"Circuit breaker for \".concat(service, \" moving to HALF_OPEN state\"));\n            return false;\n        }\n        return true;\n    }\n    return false;\n}\n/**\n * Record a success for the given service\n * @param {string} service - Service to record success for\n */ function recordSuccess(service) {\n    const breaker = circuitBreaker[service];\n    if (!breaker) return;\n    // Update success metrics\n    breaker.lastSuccessTime = Date.now();\n    if (breaker.state === \"HALF_OPEN\") {\n        // Reset circuit breaker on successful test request\n        breaker.failureCount = 0;\n        breaker.state = \"CLOSED\";\n        console.info(\"Circuit breaker for \".concat(service, \" reset to CLOSED state\"));\n    } else if (breaker.state === \"CLOSED\") {\n        // In closed state, reset failure count after a successful request\n        // This helps recover from intermittent failures\n        breaker.failureCount = 0;\n    }\n}\n/**\n * Record a failure for the given service\n * @param {string} service - Service to record failure for\n */ function recordFailure(service) {\n    const breaker = circuitBreaker[service];\n    if (!breaker) return;\n    // Increment failure count and update timestamp\n    breaker.failureCount++;\n    breaker.lastFailureTime = Date.now();\n    if (breaker.state === \"CLOSED\" && breaker.failureCount >= CIRCUIT_BREAKER_THRESHOLD) {\n        // Trip the circuit breaker when failure threshold is reached\n        breaker.state = \"OPEN\";\n        console.warn(\"Circuit breaker for \".concat(service, \" tripped to OPEN state after \").concat(CIRCUIT_BREAKER_THRESHOLD, \" failures\"));\n    } else if (breaker.state === \"HALF_OPEN\") {\n        // If test request fails in half-open state, return to open state\n        breaker.state = \"OPEN\";\n        console.warn(\"Circuit breaker for \".concat(service, \" returned to OPEN state after failed test request\"));\n    }\n}\n/**\n * Enhanced fetch wrapper with error handling, retries, circuit breaker, and fallback to mock data\n * \n * Features:\n * - Circuit breaker pattern to prevent cascading failures\n * - Exponential backoff retry mechanism\n * - Request timeout handling\n * - Graceful degradation with mock data fallbacks\n * - Detailed logging for debugging\n * \n * @param {string} endpoint - API endpoint to fetch from (without base URL)\n * @param {Object} options - Fetch options\n * @param {string} mockDataKey - Key to access mock data if API fails\n * @param {number} retryCount - Current retry count (used internally)\n * @returns {Promise<any>} - Parsed response data\n */ async function fetchWithErrorHandling(endpoint) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, mockDataKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null, retryCount = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    const service = \"HEROKU_API\";\n    const fullUrl = \"\".concat(API_ENDPOINTS.HEROKU_API).concat(endpoint);\n    // Create a request ID for logging\n    const requestId = Math.random().toString(36).substring(2, 10);\n    // Check circuit breaker\n    if (isCircuitOpen(service)) {\n        console.warn(\"[\".concat(requestId, \"] Circuit open for \").concat(service, \", falling back to mock data\"));\n        return getMockData(endpoint, mockDataKey);\n    }\n    // Create AbortController for timeout\n    const controller = typeof AbortController !== \"undefined\" ? new AbortController() : null;\n    const timeoutDuration = options.timeout || REQUEST_TIMEOUT_MS;\n    const timeoutId = controller ? setTimeout(()=>controller.abort(), timeoutDuration) : null;\n    try {\n        console.info(\"[\".concat(requestId, \"] Fetching from \").concat(fullUrl, \" (attempt \").concat(retryCount + 1, \"/\").concat(MAX_RETRIES + 1, \")\"));\n        const response = await fetch(fullUrl, {\n            ...options,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"X-Request-ID\": requestId,\n                ...options.headers\n            },\n            mode: \"cors\",\n            credentials: \"omit\",\n            signal: options.signal || (controller === null || controller === void 0 ? void 0 : controller.signal)\n        });\n        // Clear timeout if set\n        if (timeoutId) clearTimeout(timeoutId);\n        if (!response.ok) {\n            throw new Error(\"API error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const data = await response.json();\n        // Record success for circuit breaker\n        recordSuccess(service);\n        return data;\n    } catch (error) {\n        // Clear timeout if still active\n        if (timeoutId) clearTimeout(timeoutId);\n        // Handle timeout errors specifically\n        const isTimeout = error.name === \"AbortError\";\n        const errorMsg = isTimeout ? \"Request timed out after \".concat(timeoutDuration, \"ms\") : error.message;\n        console.error(\"[\".concat(requestId, \"] API request failed (attempt \").concat(retryCount + 1, \"/\").concat(MAX_RETRIES + 1, \"): \").concat(errorMsg));\n        // Record failure for circuit breaker\n        recordFailure(service);\n        // Check if we should retry\n        if (retryCount < MAX_RETRIES) {\n            const backoffTime = RETRY_BACKOFF_MS * Math.pow(2, retryCount);\n            console.info(\"[\".concat(requestId, \"] Retrying in \").concat(backoffTime, \"ms...\"));\n            return new Promise((resolve)=>{\n                setTimeout(()=>{\n                    resolve(fetchWithErrorHandling(endpoint, options, mockDataKey, retryCount + 1));\n                }, backoffTime);\n            });\n        }\n        // Fall back to mock data after all retries are exhausted\n        console.warn(\"[\".concat(requestId, \"] All retries failed, falling back to mock data\"));\n        return getMockData(endpoint, mockDataKey);\n    }\n}\n/**\n * Get mock data for an endpoint\n * @param {string} endpoint - API endpoint\n * @param {string} mockDataKey - Key to access mock data\n * @returns {any} - Mock data\n */ function getMockData(endpoint, mockDataKey) {\n    // If we have mock data for this key, return it\n    if (mockDataKey && MOCK_DATA[mockDataKey]) {\n        console.info(\"Using mock data for \".concat(endpoint, \" with key \").concat(mockDataKey));\n        // Special case for single item requests\n        if (endpoint.includes(\"/\")) {\n            const parts = endpoint.split(\"/\");\n            const id = parts[parts.length - 1];\n            // If the mockDataKey points to an array, find the item with matching ID\n            const items = MOCK_DATA[mockDataKey];\n            if (items && Array.isArray(items)) {\n                const item = items.find((i)=>String(i.id) === String(id));\n                if (item) {\n                    return item;\n                }\n            }\n        }\n        return MOCK_DATA[mockDataKey];\n    }\n    // Default mock data for unknown endpoints\n    if (endpoint.includes(\"molecules\")) {\n        return Array.isArray(MOCK_DATA.molecules) ? MOCK_DATA.molecules[0] : null;\n    } else if (endpoint.includes(\"mixtures\")) {\n        return Array.isArray(MOCK_DATA.mixtures) ? MOCK_DATA.mixtures[0] : null;\n    }\n    // No mock data available\n    throw new Error(\"No mock data available for \".concat(endpoint));\n}\n/**\n * Fetch wrapper for RDKit API with circuit breaker\n * @param {string} endpoint - API endpoint to fetch from (e.g., '/calculate', '/depict')\n * @param {Object} data - Request data to send\n * @param {Object} options - Additional fetch options\n * @param {number} retryCount - Current retry count (used internally)\n * @returns {Promise<any>} - Parsed response data\n */ async function fetchRDKitAPI(endpoint, data) {\n    let options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, retryCount = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;\n    const service = \"RDKIT_API\";\n    const fullUrl = \"\".concat(API_ENDPOINTS.RDKIT_API).concat(endpoint);\n    // Create a request ID for logging\n    const requestId = Math.random().toString(36).substring(2, 10);\n    // Check circuit breaker\n    if (isCircuitOpen(service)) {\n        console.warn(\"[\".concat(requestId, \"] Circuit open for \").concat(service));\n        throw new Error(\"RDKit service unavailable (circuit open)\");\n    }\n    // Create AbortController for timeout\n    const controller = typeof AbortController !== \"undefined\" ? new AbortController() : null;\n    const timeoutDuration = options.timeout || REQUEST_TIMEOUT_MS;\n    const timeoutId = controller ? setTimeout(()=>controller.abort(), timeoutDuration) : null;\n    try {\n        console.info(\"[\".concat(requestId, \"] Fetching from \").concat(fullUrl, \" (attempt \").concat(retryCount + 1, \"/\").concat(MAX_RETRIES + 1, \")\"));\n        const response = await fetch(fullUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"X-Request-ID\": requestId,\n                ...options.headers\n            },\n            body: JSON.stringify(data),\n            mode: \"cors\",\n            credentials: \"omit\",\n            signal: controller === null || controller === void 0 ? void 0 : controller.signal\n        });\n        // Clear timeout\n        if (timeoutId) clearTimeout(timeoutId);\n        if (!response.ok) {\n            throw new Error(\"RDKit API error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        const responseData = await response.json();\n        // Record success\n        recordSuccess(service);\n        return responseData;\n    } catch (error) {\n        // Clear timeout if still active\n        if (timeoutId) clearTimeout(timeoutId);\n        // Handle timeout errors specifically\n        const isTimeout = error.name === \"AbortError\";\n        const errorMsg = isTimeout ? \"Request timed out after \".concat(timeoutDuration, \"ms\") : error.message;\n        console.error(\"[\".concat(requestId, \"] RDKit API request failed (attempt \").concat(retryCount + 1, \"/\").concat(MAX_RETRIES + 1, \"): \").concat(errorMsg));\n        // Record failure\n        recordFailure(service);\n        // Check if we should retry\n        if (retryCount < MAX_RETRIES) {\n            const backoffTime = RETRY_BACKOFF_MS * Math.pow(2, retryCount);\n            console.info(\"[\".concat(requestId, \"] Retrying RDKit API in \").concat(backoffTime, \"ms...\"));\n            return new Promise((resolve)=>{\n                setTimeout(()=>{\n                    resolve(fetchRDKitAPI(endpoint, data, options, retryCount + 1));\n                }, backoffTime);\n            });\n        }\n        throw error;\n    }\n}\n/**\n * Get all molecules\n * @returns {Promise<Array>} List of molecules\n */ async function getMolecules() {\n    // Convex functionality disabled for minimal deployment\n    // We'll always use the REST API or mock data\n    // Fall back to REST API\n    return fetchWithErrorHandling(\"/molecules\", {}, \"molecules\");\n}\n/**\n * Get a single molecule by ID\n * @param {string|number} id - Molecule ID\n * @returns {Promise<Object>} Molecule data\n */ async function getMolecule(id) {\n    // Convex functionality disabled for minimal deployment\n    // We'll always use the REST API or mock data\n    // Fall back to REST API\n    return fetchWithErrorHandling(\"/molecules/\".concat(id), {}, \"molecules\");\n}\n/**\n * Get all mixtures \n * @returns {Promise<Array>} List of mixtures\n */ async function getMixtures() {\n    // Convex functionality disabled for minimal deployment\n    // We'll always use the REST API or mock data\n    // Fall back to REST API\n    return fetchWithErrorHandling(\"/mixtures\", {}, \"mixtures\");\n}\n/**\n * Get a single mixture by ID\n * @param {string|number} id - Mixture ID\n * @returns {Promise<Object>} Mixture data\n */ async function getMixture(id) {\n    // Convex functionality disabled for minimal deployment\n    // We'll always use the REST API or mock data\n    // Fall back to REST API\n    return fetchWithErrorHandling(\"/mixtures/\".concat(id), {}, \"mixtures\");\n}\n/**\n * Get RDKit molecular properties with circuit breaker and fallback\n * @param {string} smiles - SMILES notation of the molecule\n * @returns {Promise<Object>} RDKit calculation results\n */ async function getRDKitProperties(smiles) {\n    if (!smiles) {\n        return {\n            error: \"No SMILES provided\",\n            molecular_weight: 0,\n            logp: 0,\n            num_atoms: 0,\n            num_rings: 0\n        };\n    }\n    try {\n        // Request properties from RDKit service\n        const data = await fetchRDKitAPI(\"/calculate\", {\n            smiles\n        });\n        return data;\n    } catch (error) {\n        console.error(\"RDKit properties calculation failed:\", error);\n        // Use fallback property calculation\n        if (MOCK_DATA.molecular_properties[smiles]) {\n            console.info(\"Using pre-computed properties for \".concat(smiles));\n            return {\n                ...MOCK_DATA.molecular_properties[smiles],\n                source: \"fallback\"\n            };\n        }\n        // If no pre-computed data, use rough estimation\n        return {\n            molecular_weight: estimateMolecularWeight(smiles),\n            logp: 0,\n            num_atoms: countAtoms(smiles),\n            num_rings: estimateRingCount(smiles),\n            error: \"Failed to fetch properties from RDKit service, using estimated values\",\n            source: \"estimated\"\n        };\n    }\n}\n/**\n * Generate a 2D depiction of a molecule with circuit breaker and fallback\n * @param {string} smiles - SMILES notation of the molecule\n * @param {Object} options - Optional rendering options (width, height, includeMoleculeDetails)\n * @returns {Promise<string>} SVG depiction\n */ async function getMoleculeDepiction(smiles) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (!smiles) return \"\";\n    const requestData = {\n        smiles,\n        width: options.width || 300,\n        height: options.height || 200,\n        includeMoleculeDetails: options.includeMoleculeDetails || false\n    };\n    try {\n        // Request depiction from RDKit service\n        const data = await fetchRDKitAPI(\"/depict\", requestData);\n        return data.svg || \"\";\n    } catch (error) {\n        console.error(\"RDKit depiction generation failed:\", error);\n        // Try to use cached SVG depiction if available\n        if (MOCK_DATA.molecular_depictions[smiles]) {\n            console.info(\"Using cached depiction for \".concat(smiles));\n            return MOCK_DATA.molecular_depictions[smiles];\n        }\n        // Otherwise return empty string to show fallback UI\n        return \"\";\n    }\n}\n/**\n * Very basic estimation of molecular weight from SMILES (fallback method)\n * This is a very rough approximation and should only be used when RDKit is unavailable\n * @param {string} smiles - SMILES notation\n * @returns {number} Estimated molecular weight\n */ function estimateMolecularWeight(smiles) {\n    // This is an extremely simplified approach\n    // A real implementation would need to parse the SMILES properly\n    // Count some common atoms\n    const carbonCount = (smiles.match(/C/g) || []).length;\n    const hydrogenCount = (smiles.match(/H/g) || []).length;\n    const oxygenCount = (smiles.match(/O/g) || []).length;\n    const nitrogenCount = (smiles.match(/N/g) || []).length;\n    const sulfurCount = (smiles.match(/S/g) || []).length;\n    const phosphorusCount = (smiles.match(/P/g) || []).length;\n    const fluorineCount = (smiles.match(/F/g) || []).length;\n    const chlorineCount = (smiles.match(/Cl/g) || []).length;\n    const bromineCount = (smiles.match(/Br/g) || []).length;\n    const iodineCount = (smiles.match(/I/g) || []).length;\n    // Approximate weights\n    const C_WEIGHT = 12.01;\n    const H_WEIGHT = 1.01;\n    const O_WEIGHT = 16.00;\n    const N_WEIGHT = 14.01;\n    const S_WEIGHT = 32.07;\n    const P_WEIGHT = 30.97;\n    const F_WEIGHT = 19.00;\n    const CL_WEIGHT = 35.45;\n    const BR_WEIGHT = 79.90;\n    const I_WEIGHT = 126.90;\n    // Rough estimate of weight from atom counts\n    const weight = carbonCount * C_WEIGHT + hydrogenCount * H_WEIGHT + oxygenCount * O_WEIGHT + nitrogenCount * N_WEIGHT + sulfurCount * S_WEIGHT + phosphorusCount * P_WEIGHT + fluorineCount * F_WEIGHT + chlorineCount * CL_WEIGHT + bromineCount * BR_WEIGHT + iodineCount * I_WEIGHT;\n    // Add an estimate for implicit hydrogens\n    // This is a very rough heuristic\n    const implicitHydrogens = Math.max(0, carbonCount * 2);\n    return Math.round((weight + implicitHydrogens * H_WEIGHT) * 100) / 100;\n}\n/**\n * Count atoms in SMILES (fallback method)\n * @param {string} smiles - SMILES notation\n * @returns {number} Approximate atom count\n */ function countAtoms(smiles) {\n    // This is a very simplified approach\n    // We'll count the uppercase letters as a rough proxy for atoms\n    // We'll also check for some common two-letter atoms\n    // Basic pattern for any atom symbol (uppercase letter possibly followed by lowercase letter)\n    const atomPattern = /[A-Z][a-z]?/g;\n    const matches = smiles.match(atomPattern) || [];\n    return matches.length;\n}\n/**\n * Estimate the number of rings in a molecule from SMILES\n * This is a very basic heuristic for when RDKit is unavailable\n * @param {string} smiles - SMILES notation\n * @returns {number} Approximate ring count\n */ function estimateRingCount(smiles) {\n    // Look for digit pairs which indicate ring closures in SMILES\n    const ringDigits = smiles.match(/\\d/g) || [];\n    // Each ring should be counted once (two digits per ring)\n    return Math.floor(ringDigits.length / 2);\n}\n/**\n * Check Convex connection status\n * @returns {Promise<boolean>} True if Convex is connected\n */ async function checkConvexConnection() {\n    // Convex functionality disabled for minimal deployment\n    return false;\n}\n/**\n * Add a new molecule using Convex\n * @param {Object} moleculeData - Data for the new molecule\n * @returns {Promise<Object>} Result of the operation\n */ async function addMolecule(moleculeData) {\n    // Convex functionality disabled for minimal deployment\n    throw new Error(\"Adding molecules is not available in this minimal deployment\");\n}\n/**\n * Delete a molecule using Convex\n * @param {string} id - ID of the molecule to delete\n * @returns {Promise<Object>} Result of the operation\n */ async function deleteMolecule(id) {\n    // Convex functionality disabled for minimal deployment\n    throw new Error(\"Deleting molecules is not available in this minimal deployment\");\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n    getMolecules,\n    getMolecule,\n    getMixtures,\n    getMixture,\n    getRDKitProperties,\n    getMoleculeDepiction,\n    checkConvexConnection,\n    addMolecule,\n    deleteMolecule\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./utils/api.js\n"));

/***/ })

});