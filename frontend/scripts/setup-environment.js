#!/usr/bin/env node
/**
 * Environment Setup Script
 * 
 * This script generates the appropriate environment configuration for different
 * deployment environments (development, preview, production).
 * 
 * Usage:
 *   node scripts/setup-environment.js --env=[development|preview|production] [--pr=123]
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Parse command line arguments
const args = process.argv.slice(2).reduce((acc, arg) => {
  const [key, value] = arg.replace(/^--/, '').split('=');
  acc[key] = value;
  return acc;
}, {});

// Set default environment if not provided
const environment = args.env || process.env.NODE_ENV || 'development';
const prNumber = args.pr || process.env.PR_NUMBER || '';
const commitSha = args.commit || process.env.COMMIT_SHA || 'local';
const shortSha = commitSha.substring(0, 7);

// Generate a timestamp for versioning
const timestamp = new Date().toISOString().replace(/[-:T.Z]/g, '').substring(0, 14);

// Generate a build version
const buildVersion = `${timestamp}-${shortSha}`;

// Base configuration that applies to all environments
const baseConfig = {
  // Versioning
  NEXT_PUBLIC_BUILD_VERSION: buildVersion,
  NEXT_PUBLIC_COMMIT_SHA: commitSha,
  
  // Environment
  NEXT_PUBLIC_ENVIRONMENT: environment,
  
  // Feature flags
  NEXT_PUBLIC_FEATURE_MOLECULAR_VIEWER: 'true',
  NEXT_PUBLIC_FEATURE_PROPERTY_EXPLORER: 'true',
};

// Environment-specific configurations
const envConfigs = {
  development: {
    NEXT_PUBLIC_API_URL: 'http://localhost:5000/v1',
    NEXT_PUBLIC_USE_MOCK_DATA: 'true',
    NEXTAUTH_URL: 'http://localhost:3000',
    NEXTAUTH_DEBUG: 'true',
  },
  
  preview: {
    NEXT_PUBLIC_API_URL: 'https://api-preview.cryoprotect.app/v1',
    NEXT_PUBLIC_USE_MOCK_DATA: 'true',
    NEXTAUTH_URL: prNumber 
      ? `https://preview-pr-${prNumber}.cryoprotect.vercel.app` 
      : 'https://preview.cryoprotect.app',
    NEXT_PUBLIC_PR_NUMBER: prNumber,
  },
  
  production: {
    NEXT_PUBLIC_API_URL: 'https://api.cryoprotect.app/v1',
    NEXT_PUBLIC_USE_MOCK_DATA: 'false',
    NEXTAUTH_URL: 'https://www.cryoprotect.app',
  },
};

// Combine base config with environment-specific config
const config = {
  ...baseConfig,
  ...envConfigs[environment],
};

// Convert config to .env format
const envContent = Object.entries(config)
  .map(([key, value]) => `${key}=${value}`)
  .join('\n');

// Write to .env file
const envFilePath = path.join(__dirname, '..', '.env');
fs.writeFileSync(envFilePath, envContent);

// Log the generated configuration
console.log(`Generated environment configuration for: ${environment}`);
console.log(`Build version: ${buildVersion}`);
if (prNumber) {
  console.log(`PR number: ${prNumber}`);
}
console.log('\nEnvironment variables:');
console.log(envContent);

// Generate a NextAuth secret for local development if it doesn't exist
if (environment === 'development') {
  const localEnvPath = path.join(__dirname, '..', '.env.local');
  
  // Check if .env.local exists and contains NEXTAUTH_SECRET
  let existingContent = '';
  let hasNextAuthSecret = false;
  
  if (fs.existsSync(localEnvPath)) {
    existingContent = fs.readFileSync(localEnvPath, 'utf8');
    hasNextAuthSecret = existingContent.includes('NEXTAUTH_SECRET=');
  }
  
  if (!hasNextAuthSecret) {
    // Generate a random secret
    const nextAuthSecret = crypto.randomBytes(32).toString('base64');
    
    // Add it to the existing content or create new content
    const newContent = existingContent.trim() + 
      (existingContent ? '\n\n' : '') + 
      `# NextAuth Secret - Generated by setup-environment.js\nNEXTAUTH_SECRET=${nextAuthSecret}\n`;
    
    // Write to .env.local
    fs.writeFileSync(localEnvPath, newContent);
    
    console.log('\nGenerated NEXTAUTH_SECRET and added to .env.local');
  }
}