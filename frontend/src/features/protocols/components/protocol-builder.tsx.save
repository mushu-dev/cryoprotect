import React, { useState } from 'react';
import { useRouter } from 'next/navigation';
import { createProtocol } from '../actions/protocol-actions';

/**
 * Component for building and creating a new protocol
 */
export function ProtocolBuilder() {
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [currentStep, setCurrentStep] = useState(1);
  
  // Protocol data
  const [protocolData, setProtocolData] = useState({
    name: '',
    description: '',
    duration: '',
    cell_types: [''],
    equipment: [''],
    cryoprotectants: [{ name: '', concentration: '' }],
    freezing_rate: '',
    storage_temperature: '',
    thawing_method: '',
    steps: [{ 
      order: 1, 
      title: '', 
      description: '', 
      duration: '',
      is_critical: false 
    }],
    notes: '',
    is_template: false
  });
  
  // Handle basic input changes
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setProtocolData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  // Handle checkbox changes
  const handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setProtocolData(prev => ({
      ...prev,
      [name]: checked
    }));
  };
  
  // Handle array input changes (cell_types, equipment)
  const handleArrayChange = (index: number, field: string, value: string) => {
    setProtocolData(prev => {
      const updatedArray = [...prev[field as keyof typeof prev]] as string[];
      updatedArray[index] = value;
      return {
        ...prev,
        [field]: updatedArray
      };
    });
  };
  
  // Add new item to array (cell_types, equipment)
  const addArrayItem = (field: string) => {
    setProtocolData(prev => {
      const updatedArray = [...prev[field as keyof typeof prev]] as string[];
      updatedArray.push('');
      return {
        ...prev,
        [field]: updatedArray
      };
    });
  };
  
  // Remove item from array (cell_types, equipment)
  const removeArrayItem = (index: number, field: string) => {
    setProtocolData(prev => {
      const updatedArray = [...prev[field as keyof typeof prev]] as string[];
      if (updatedArray.length > 1) {
        updatedArray.splice(index, 1);
      }
      return {
        ...prev,
        [field]: updatedArray
      };
    });
  };
  
  // Handle cryoprotectant changes
  const handleCryoprotectantChange = (index: number, field: string, value: string) => {
    setProtocolData(prev => {
      const updatedCryoprotectants = [...prev.cryoprotectants];
      updatedCryoprotectants[index] = {
        ...updatedCryoprotectants[index],
        [field]: value
      };
      return {
        ...prev,
        cryoprotectants: updatedCryoprotectants
      };
    });
  };
  
  // Add new cryoprotectant
  const addCryoprotectant = () => {
    setProtocolData(prev => ({
      ...prev,
      cryoprotectants: [...prev.cryoprotectants, { name: '', concentration: '' }]
    }));
  };
  
  // Remove cryoprotectant
  const removeCryoprotectant = (index: number) => {
    setProtocolData(prev => {
      const updatedCryoprotectants = [...prev.cryoprotectants];
      if (updatedCryoprotectants.length > 1) {
        updatedCryoprotectants.splice(index, 1);
      }
      return {
        ...prev,
        cryoprotectants: updatedCryoprotectants
      };
    });
  };
  
  // Handle step changes
  const handleStepChange = (index: number, field: string, value: any) => {
    setProtocolData(prev => {
      const updatedSteps = [...prev.steps];
      updatedSteps[index] = {
        ...updatedSteps[index],
        [field]: value
      };
      return {
        ...prev,
        steps: updatedSteps
      };
    });
  };
  
  // Add new step
  const addStep = () => {
    setProtocolData(prev => ({
      ...prev,
      steps: [
        ...prev.steps, 
        { 
          order: prev.steps.length + 1, 
          title: '', 
          description: '', 
          duration: '',
          is_critical: false 
        }
      ]
    }));
  };
  
  // Remove step
  const removeStep = (index: number) => {
    setProtocolData(prev => {
      if (prev.steps.length <= 1) {
        return prev;
      }
      
      const updatedSteps = prev.steps.filter((_, i) => i !== index);
      
      // Update order numbers
      updatedSteps.forEach((step, i) => {
        step.order = i + 1;
      });
      
      return {
        ...prev,
        steps: updatedSteps
      };
    });
  };
  
  // Go to next step
  const handleNextStep = () => {
    setCurrentStep(prev => prev + 1);
  };
  
  // Go to previous step
  const handlePrevStep = () => {
    setCurrentStep(prev => Math.max(prev - 1, 1));
  };
  
  // Handle protocol submission
  const handleSubmit = async () => {
    try {
      setIsSubmitting(true);
      
      // Create a new protocol
      const result = await createProtocol({
        ...protocolData,
        author: { name: 'Dr. John Doe', id: 'user1' }
      });
      
      // Navigate to the protocol detail page
      router.push(`/protocols/${result.id}`);
    } catch (error) {
      console.error('Error creating protocol:', error);
      // Handle error
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Render Step 1: Basic Information
  const renderBasicInfoStep = () => (
    <div className="space-y-6">
      <div>
        <label htmlFor="name" className="block text-sm font-medium mb-2">
          Protocol Name <span className="text-red-500">*</span>
        </label>
        <input
          type="text"
          id="name"
          name="name"
          value={protocolData.name}
          onChange={handleChange}
          className="w-full rounded-md border px-3 py-2"
          placeholder="e.g., Standard Cell Freezing Protocol"
          required
        />
      </div>
      
      <div>
        <label htmlFor="description" className="block text-sm font-medium mb-2">
          Description <span className="text-red-500">*</span>
        </label>
        <textarea
          id="description"
          name="description"
          value={protocolData.description}
          onChange={handleChange}
          className="w-full rounded-md border px-3 py-2"
          placeholder="Brief description of the protocol purpose and application"
          rows={4}
          required
        />
      </div>
      
      <div>
        <label htmlFor="duration" className="block text-sm font-medium mb-2">
          Estimated Duration <span className="text-red-500">*</span>
        </label>
        <input
          type="text"
          id="duration"
          name="duration"
          value={protocolData.duration}
          onChange={handleChange}
          className="w-full rounded-md border px-3 py-2"
          placeholder="e.g., 2 hours"
          required
        />
      </div>
      
      <div className="flex items-center">
        <input
          type="checkbox"
          id="is_template"
          name="is_template"
          checked={protocolData.is_template}
          onChange={handleCheckboxChange}
          className="mr-2 h-4 w-4"
        />
        <label htmlFor="is_template" className="text-sm font-medium">
          Mark as Template Protocol
        </label>
      </div>
    </div>
  );
  
  // Render Step 2: Cell Types and Equipment
  const renderCellTypesEquipmentStep = () => (
    <div className="space-y-6">
      <div>
        <div className="flex justify-between items-center mb-2">
          <label className="block text-sm font-medium">
            Compatible Cell Types <span className="text-red-500">*</span>
          </label>
          <button
            type="button"
            onClick={() => addArrayItem('cell_types')}
            className="text-sm text-primary hover:underline"
          >
            + Add Cell Type
          </button>
        </div>
        
        {protocolData.cell_types.map((cellType, index) => (
          <div key={index} className="flex gap-3 mb-3 items-center">
            <input
              type="text"
              value={cellType}
              onChange={(e) => handleArrayChange(index, 'cell_types', e.target.value)}
              className="flex-1 rounded-md border px-3 py-2"
              placeholder="e.g., Human embryonic stem cells"
              required
            />
            {protocolData.cell_types.length > 1 && (
              <button
                type="button"
                onClick={() => removeArrayItem(index, 'cell_types')}
                className="p-2 text-red-500 hover:text-red-700"
              >
                &times;
              </button>
            )}
          </div>
        ))}
      </div>
      
      <div>
        <div className="flex justify-between items-center mb-2">
          <label className="block text-sm font-medium">
            Required Equipment <span className="text-red-500">*</span>
          </label>
          <button
            type="button"
            onClick={() => addArrayItem('equipment')}
            className="text-sm text-primary hover:underline"
          >
            + Add Equipment
          </button>
        </div>
        
        {protocolData.equipment.map((equipment, index) => (
          <div key={index} className="flex gap-3 mb-3 items-center">
            <input
              type="text"
              value={equipment}
              onChange={(e) => handleArrayChange(index, 'equipment', e.target.value)}
              className="flex-1 rounded-md border px-3 py-2"
              placeholder="e.g., Controlled-rate freezer"
              required
            />
            {protocolData.equipment.length > 1 && (
              <button
                type="button"
                onClick={() => removeArrayItem(index, 'equipment')}
                className="p-2 text-red-500 hover:text-red-700"
              >
                &times;
              </button>
            )}
          </div>
        ))}
      </div>
    </div>
  );
  
  // Render Step 3: Cryopreservation Parameters
  const renderCryopreservationStep = () => (
    <div className="space-y-6">
      <div>
        <div className="flex justify-between items-center mb-2">
          <label className="block text-sm font-medium">
            Cryoprotectants <span className="text-red-500">*</span>
          </label>
          <button
            type="button"
            onClick={addCryoprotectant}
            className="text-sm text-primary hover:underline"
          >
            + Add Cryoprotectant
          </button>
        </div>
        
        {protocolData.cryoprotectants.map((cp, index) => (
          <div key={index} className="flex gap-3 mb-3 items-start">
            <div className="flex-1">
              <input
                type="text"
                value={cp.name}
                onChange={(e) => handleCryoprotectantChange(index, 'name', e.target.value)}
                className="w-full rounded-md border px-3 py-2"
                placeholder="Name (e.g., DMSO)"
                required
              />
            </div>
            <div className="w-1/3">
              <input
                type="text"
                value={cp.concentration}
                onChange={(e) => handleCryoprotectantChange(index, 'concentration', e.target.value)}
                className="w-full rounded-md border px-3 py-2"
                placeholder="Concentration (e.g., 10%)"
                required
              />
            </div>
            {protocolData.cryoprotectants.length > 1 && (
              <button
                type="button"
                onClick={() => removeCryoprotectant(index)}
                className="p-2 text-red-500 hover:text-red-700"
              >
                &times;
              </button>
            )}
          </div>
        ))}
      </div>
      
      <div>
        <label htmlFor="freezing_rate" className="block text-sm font-medium mb-2">
          Freezing Rate <span className="text-red-500">*</span>
        </label>
        <input
          type="text"
          id="freezing_rate"
          name="freezing_rate"
          value={protocolData.freezing_rate}
          onChange={handleChange}
          className="w-full rounded-md border px-3 py-2"
          placeholder="e.g., -1°C/min"
          required
        />
      </div>
      
      <div>
        <label htmlFor="storage_temperature" className="block text-sm font-medium mb-2">
          Storage Temperature <span className="text-red-500">*</span>
        </label>
        <input
          type="text"
          id="storage_temperature"
          name="storage_temperature"
          value={protocolData.storage_temperature}
          onChange={handleChange}
          className="w-full rounded-md border px-3 py-2"
          placeholder="e.g., -196°C (liquid nitrogen)"
          required
        />
      </div>
      
      <div>
        <label htmlFor="thawing_method" className="block text-sm font-medium mb-2">
          Thawing Method <span className="text-red-500">*</span>
        </label>
        <input
          type="text"
          id="thawing_method"
          name="thawing_method"
          value={protocolData.thawing_method}
          onChange={handleChange}
          className="w-full rounded-md border px-3 py-2"
          placeholder="e.g., Rapid thawing in 37°C water bath"
          required
        />
      </div>
    </div>
  );
  
  // Render Step 4: Protocol Steps
  const renderProtocolStepsStep = () => (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-medium">Protocol Steps</h3>
        <button
          type="button"
          onClick={addStep}
          className="text-sm bg-secondary text-secondary-foreground px-3 py-1 rounded-md hover:bg-secondary/80"
        >
          + Add Step
        </button>
      </div>
      
      {protocolData.steps.map((step, index) => (
        <div key={index} className="border rounded-lg p-4 mb-4 relative">
          <div className="absolute top-3 right-3 flex items-center space-x-1">
            <div className="text-sm font-semibold text-muted-foreground">
              Step {step.order}
            </div>
            {protocolData.steps.length > 1 && (
              <button
                type="button"
                onClick={() => removeStep(index)}
                className="p-1 text-red-500 hover:text-red-700"
              >
                &times;
              </button>
            )}
          </div>
          
          <div className="space-y-4 mt-2">
            <div>
              <label className="block text-sm font-medium mb-2">
                Title <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                value={step.title}
                onChange={(e) => handleStepChange(index, 'title', e.target.value)}
                className="w-full rounded-md border px-3 py-2"
                placeholder="e.g., Prepare cryopreservation medium"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium mb-2">
                Description <span className="text-red-500">*</span>
              </label>
              <textarea
                value={step.description}
                onChange={(e) => handleStepChange(index, 'description', e.target.value)}
                className="w-full rounded-md border px-3 py-2"
                placeholder="Detailed instructions for this step"
                rows={3}
                required
              />
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-2">
                  Duration <span className="text-red-500">*</span>
                </label>
                <input
                  type="text"
                  value={step.duration}
                  onChange={(e) => handleStepChange(index, 'duration', e.target.value)}
                  className="w-full rounded-md border px-3 py-2"
                  placeholder="e.g., 15 minutes"
                  required
                />
              </div>
              
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id={`critical-${index}`}
                  checked={step.is_critical}
                  onChange={(e) => handleStepChange(index, 'is_critical', e.target.checked)}
                  className="mr-2 h-4 w-4"
                />
                <label htmlFor={`critical-${index}`} className="text-sm font-medium">
                  Critical Step
                </label>
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  );
  
  // Render Step 5: Notes and Review
  const renderNotesReviewStep = () => (
    <div className="space-y-6">
      <div>
        <label htmlFor="notes" className="block text-sm font-medium mb-2">
          Notes and Special Instructions
        </label>
        <textarea
          id="notes"
          name="notes"
          value={protocolData.notes}
          onChange={handleChange}
          className="w-full rounded-md border px-3 py-2"
          placeholder="Additional information, tips, or warnings about this protocol"
          rows={6}
        />
      </div>
      
      <div className="bg-muted/10 border rounded-lg p-4">
        <h3 className="font-medium mb-3">Protocol Summary</h3>
        <dl className="space-y-2 text-sm">
          <div>
            <dt className="font-medium">Name:</dt>
            <dd>{protocolData.name}</dd>
          </div>
          <div>
            <dt className="font-medium">Steps:</dt>
            <dd>{protocolData.steps.length}</dd>
          </div>
          <div>
            <dt className="font-medium">Duration:</dt>
            <dd>{protocolData.duration}</dd>
          </div>
          <div>
            <dt className="font-medium">Cell Types:</dt>
            <dd>{protocolData.cell_types.filter(Boolean).join(', ') || '-'}</dd>
          </div>
          <div>
            <dt className="font-medium">Cryoprotectants:</dt>
            <dd>
              {protocolData.cryoprotectants
                .filter(cp => cp.name && cp.concentration)
                .map(cp => `${cp.name} (${cp.concentration})`)
                .join(', ') || '-'}
            </dd>
          </div>
          <div>
            <dt className="font-medium">Template:</dt>
            <dd>{protocolData.is_template ? 'Yes' : 'No'}</dd>
          </div>
        </dl>
      </div>
    </div>
  );
  
  // Render current step content
  const renderStepContent = () => {
    switch (currentStep) {
      case 1:
        return renderBasicInfoStep();
      case 2:
        return renderCellTypesEquipmentStep();
      case 3:
        return renderCryopreservationStep();
      case 4:
        return renderProtocolStepsStep();
      case 5:
        return renderNotesReviewStep();
      default:
        return null;
    }
  };
  
  // Calculate progress percentage
  const progressPercentage = (currentStep / 5) * 100;
  
  // Determine if current step is valid
  const isCurrentStepValid = () => {
    switch (currentStep) {
      case 1:
        return protocolData.name && protocolData.description && protocolData.duration;
      case 2:
        return (
          protocolData.cell_types.length > 0 && 
          protocolData.cell_types.every(Boolean) &&
          protocolData.equipment.length > 0 && 
          protocolData.equipment.every(Boolean)
        );
      case 3:
        return (
          protocolData.cryoprotectants.length > 0 &&
          protocolData.cryoprotectants.every(cp => cp.name && cp.concentration) &&
          protocolData.freezing_rate &&
          protocolData.storage_temperature &&
          protocolData.thawing_method
        );
      case 4:
        return (
          protocolData.steps.length > 0 &&
          protocolData.steps.every(step => step.title && step.description && step.duration)
        );
      case 5:
        return true;
      default:
        return false;
    }
  };
  
  return (
    <div className="bg-card rounded-lg border shadow-sm p-6">
      {/* Progress bar */}
      <div className="mb-8">
        <div className="flex justify-between text-sm font-medium text-muted-foreground mb-1">
          <span>Step {currentStep} of 5</span>
          <span>{Math.round(progressPercentage)}% Complete</span>
        </div>
        <div className="w-full bg-muted rounded-full h-2.5">
          <div 
            className="bg-primary h-2.5 rounded-full" 
            style={{ width: `${progressPercentage}%` }}
          ></div>
        </div>
      </div>
      
      {/* Step title */}
      <h2 className="text-xl font-bold mb-6">
        {currentStep === 1 && 'Basic Information'}
        {currentStep === 2 && 'Cell Types & Equipment'}
        {currentStep === 3 && 'Cryopreservation Parameters'}
        {currentStep === 4 && 'Protocol Steps'}
        {currentStep === 5 && 'Notes & Review'}
      </h2>
      
      {/* Step content */}
      <div className="mb-8">
        {renderStepContent()}
      </div>
      
      {/* Navigation buttons */}
      <div className="border-t pt-6 flex justify-between">
        <button
          type="button"
          onClick={handlePrevStep}
          className={`px-4 py-2 rounded-md text-sm font-medium ${
            currentStep === 1 
              ? 'text-muted-foreground cursor-not-allowed' 
              : 'border text-foreground hover:bg-muted'
          }`}
          disabled={currentStep === 1}
        >
          Previous
        </button>
        
        <div>
          {currentStep < 5 ? (
            <button
              type="button"
              onClick={handleNextStep}
              disabled={!isCurrentStepValid()}
              className={`px-4 py-2 rounded-md bg-primary text-white text-sm font-medium ${
                isCurrentStepValid() 
                  ? 'hover:bg-primary/90' 
                  : 'opacity-50 cursor-not-allowed'
              }`}
            >
              Next
            </button>
          ) : (
            <button
              type="button"
              onClick={handleSubmit}
              disabled={isSubmitting}
              className="px-4 py-2 rounded-md bg-primary text-white text-sm font-medium hover:bg-primary/90 flex items-center"
            >
              {isSubmitting ? (
                <>
                  <div className="mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  Creating...
                </>
              ) : (
                'Create Protocol'
              )}
            </button>
          )}
        </div>
      </div>
    </div>
  );
}