#!/usr/bin/env python3
"""
Database connection manager for CryoProtect v2.

This module provides a singleton connection manager that handles
database connections using various adapters.
"""

import os
import logging
import importlib
from typing import Any, Dict, List, Optional, Union, Tuple, Type

# Import adapter interfaces
from .adapter import DatabaseAdapter
from .local_adapter import LocalPostgreSQLAdapter
from .supabase_adapter import SupabaseDirectAdapter
from .mcp_adapter import MCPAdapter

# Import from the new configuration system
from .connection_config import (
    validate_config,
    get_connection_config,
    get_adapter_order,
    is_adapter_enabled,
    get_adapter_configs,
    test_adapter_configuration,
    # Environment information
    DATABASE_CONNECTION_MODE
)

logger = logging.getLogger(__name__)

class ConnectionManager:
    """
    Singleton database connection manager.
    
    This class manages database connections using various adapters
    and provides a unified interface for database operations.
    """
    
    _instance = None
    
    @classmethod
    def get_instance(cls):
        """
        Get singleton instance of ConnectionManager.
        
        Returns:
            ConnectionManager: Singleton instance
        """
        if cls._instance is None:
            cls._instance = ConnectionManager()
        return cls._instance
    
    def __init__(self):
        """Initialize connection manager."""
        if ConnectionManager._instance is not None:
            raise RuntimeError("ConnectionManager is a singleton. Use get_instance() instead.")
            
        ConnectionManager._instance = self
        
        self.adapters = {}
        self.active_adapter = None
        self.config = self._load_config()
        
    def _load_config(self) -> Dict[str, Any]:
        """
        Load configuration using the new configuration system.
        
        Returns:
            Dict with configuration values
        """
        # Validate configuration
        validate_config()
        
        # Get adapter configurations
        adapter_configs = get_adapter_configs()
        
        # Get adapter order
        adapter_order = get_adapter_order()
        
        # Build the configuration dictionary
        config = {
            'environment': os.getenv('ENVIRONMENT', 'development'),
            'adapters': adapter_configs,
            'adapter_order': adapter_order
        }
        
        return config
    
    def connect(self) -> bool:
        """
        Connect to database using available adapters.
        
        Returns:
            bool: True if connection successful, False otherwise
        """
        # Try adapters in configured order
        for adapter_name in self.config['adapter_order']:
            adapter_config = self.config['adapters'].get(adapter_name)
            
            if not adapter_config or not is_adapter_enabled(adapter_name):
                logger.debug(f"Skipping disabled adapter: {adapter_name}")
                continue
                
            logger.info(f"Trying to connect using {adapter_name} adapter")
            
            # Initialize adapter if not already initialized
            if adapter_name not in self.adapters:
                self._initialize_adapter(adapter_name, adapter_config)
                
            adapter = self.adapters.get(adapter_name)
            if not adapter:
                logger.warning(f"Failed to initialize {adapter_name} adapter")
                continue
                
            # Try to connect
            if adapter.connect():
                self.active_adapter = adapter_name
                logger.info(f"Successfully connected using {adapter_name} adapter")
                return True
                
            logger.warning(f"Failed to connect using {adapter_name} adapter")
            
        logger.error("Failed to connect using any adapter")
        return False
        
    def _initialize_adapter(self, adapter_name: str, adapter_config: Dict[str, Any]) -> None:
        """
        Initialize database adapter.
        
        Args:
            adapter_name: Name of the adapter
            adapter_config: Adapter configuration
        """
        try:
            if adapter_name == 'local':
                self.adapters[adapter_name] = LocalPostgreSQLAdapter(adapter_config)
            elif adapter_name == 'supabase':
                self.adapters[adapter_name] = SupabaseDirectAdapter(adapter_config)
            elif adapter_name == 'mcp':
                self.adapters[adapter_name] = MCPAdapter(adapter_config)
            # Add other adapter types as needed
            else:
                logger.warning(f"Unknown adapter type: {adapter_name}")
        except Exception as e:
            logger.error(f"Error initializing {adapter_name} adapter: {str(e)}")
            
    def disconnect(self) -> bool:
        """
        Disconnect from all database adapters.
        
        Returns:
            bool: True if disconnection successful, False otherwise
        """
        success = True
        
        for adapter_name, adapter in self.adapters.items():
            try:
                if adapter.disconnect():
                    logger.info(f"Disconnected from {adapter_name} adapter")
                else:
                    logger.warning(f"Failed to disconnect from {adapter_name} adapter")
                    success = False
            except Exception as e:
                logger.error(f"Error disconnecting from {adapter_name} adapter: {str(e)}")
                success = False
                
        self.active_adapter = None
        return success
        
    def get_active_adapter(self) -> Optional[DatabaseAdapter]:
        """
        Get the currently active database adapter.
        
        Returns:
            DatabaseAdapter or None if no active adapter
        """
        if not self.active_adapter:
            return None
            
        return self.adapters.get(self.active_adapter)
        
    def execute_query(self, query: str, params: Optional[Union[Tuple, Dict]] = None) -> Any:
        """
        Execute SQL query using active adapter.
        
        Args:
            query: SQL query to execute
            params: Query parameters
            
        Returns:
            Query results
            
        Raises:
            ConnectionError: If no active adapter
        """
        adapter = self.get_active_adapter()
        if not adapter:
            if not self.connect():
                raise ConnectionError("No active database adapter")
            adapter = self.get_active_adapter()
            
        return adapter.execute_query(query, params)
        
    def execute_batch(self, queries: List[str]) -> List[Any]:
        """
        Execute multiple SQL queries using active adapter.
        
        Args:
            queries: List of SQL queries to execute
            
        Returns:
            List of query results
            
        Raises:
            ConnectionError: If no active adapter
        """
        adapter = self.get_active_adapter()
        if not adapter:
            if not self.connect():
                raise ConnectionError("No active database adapter")
            adapter = self.get_active_adapter()
            
        return adapter.execute_batch(queries)
        
    def begin_transaction(self) -> Any:
        """
        Begin a database transaction using active adapter.
        
        Returns:
            Transaction object
            
        Raises:
            ConnectionError: If no active adapter
        """
        adapter = self.get_active_adapter()
        if not adapter:
            if not self.connect():
                raise ConnectionError("No active database adapter")
            adapter = self.get_active_adapter()
            
        return adapter.begin_transaction()
        
    def commit_transaction(self, transaction: Any) -> bool:
        """
        Commit a database transaction using active adapter.
        
        Args:
            transaction: Transaction object
            
        Returns:
            bool: True if commit successful, False otherwise
            
        Raises:
            ConnectionError: If no active adapter
        """
        adapter = self.get_active_adapter()
        if not adapter:
            raise ConnectionError("No active database adapter")
            
        return adapter.commit_transaction(transaction)
        
    def rollback_transaction(self, transaction: Any) -> bool:
        """
        Rollback a database transaction using active adapter.
        
        Args:
            transaction: Transaction object
            
        Returns:
            bool: True if rollback successful, False otherwise
            
        Raises:
            ConnectionError: If no active adapter
        """
        adapter = self.get_active_adapter()
        if not adapter:
            raise ConnectionError("No active database adapter")
            
        return adapter.rollback_transaction(transaction)
        
    def get_connection_info(self) -> Dict[str, Any]:
        """
        Get connection information for all adapters.
        
        Returns:
            Dict with connection information
        """
        info = {
            'environment': self.config['environment'],
            'active_adapter': self.active_adapter,
            'adapters': {}
        }
        
        for adapter_name, adapter in self.adapters.items():
            try:
                adapter_info = adapter.get_connection_info()
                info['adapters'][adapter_name] = adapter_info
            except Exception as e:
                info['adapters'][adapter_name] = {
                    'error': str(e)
                }
                
        return info
        
    def test_all_connections(self) -> Dict[str, Tuple[bool, str]]:
        """
        Test all database connections.
        
        Returns:
            Dict with adapter names as keys and (success, message) tuples as values
        """
        results = {}
        
        for adapter_name, adapter in self.adapters.items():
            try:
                success, message = adapter.test_connection()
                results[adapter_name] = (success, message)
            except Exception as e:
                results[adapter_name] = (False, str(e))
                
        return results

def get_connection_manager() -> ConnectionManager:
    """
    Get the singleton connection manager instance.
    
    This is a convenience function to get the ConnectionManager instance.
    
    Returns:
        ConnectionManager instance
    """
    return ConnectionManager.get_instance()

def get_active_adapter() -> Optional[DatabaseAdapter]:
    """
    Get the currently active database adapter.
    
    This is a convenience function to get the active adapter from the
    ConnectionManager.
    
    Returns:
        DatabaseAdapter or None if no active adapter
    """
    manager = ConnectionManager.get_instance()
    return manager.get_active_adapter()

def execute_query(query: str, params: Optional[Union[Tuple, Dict]] = None) -> Any:
    """
    Execute SQL query using the active adapter.
    
    This is a convenience function to execute a query using the active
    adapter from the ConnectionManager.
    
    Args:
        query: SQL query to execute
        params: Query parameters
        
    Returns:
        Query results
        
    Raises:
        ConnectionError: If no active adapter
    """
    manager = ConnectionManager.get_instance()
    return manager.execute_query(query, params)

def execute_batch(queries: List[str]) -> List[Any]:
    """
    Execute multiple SQL queries using the active adapter.
    
    This is a convenience function to execute multiple queries using
    the active adapter from the ConnectionManager.
    
    Args:
        queries: List of SQL queries to execute
        
    Returns:
        List of query results
        
    Raises:
        ConnectionError: If no active adapter
    """
    manager = ConnectionManager.get_instance()
    return manager.execute_batch(queries)

def test_connection() -> Tuple[bool, str]:
    """
    Test the active database connection.
    
    This is a convenience function to test the active adapter connection
    from the ConnectionManager.
    
    Returns:
        (success, message) tuple
        
    Raises:
        ConnectionError: If no active adapter
    """
    adapter = get_active_adapter()
    if not adapter:
        return False, "No active database adapter"
        
    return adapter.test_connection()
    
def get_active_adapter_name() -> Optional[str]:
    """
    Get the name of the currently active adapter.
    
    Returns:
        str or None if no active adapter
    """
    manager = ConnectionManager.get_instance()
    return manager.active_adapter